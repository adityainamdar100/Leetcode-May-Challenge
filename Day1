/**
 * Definition for isBadVersion()
 * 
 * @param {integer} version number
 * @return {boolean} whether the version is bad
 * isBadVersion = function(version) {
 *     ...
 * };
 */

/**
 * @param {function} isBadVersion()
 * @return {function}
 */
var solution = function(isBadVersion) {
    /**
     * @param {integer} n Total versions
     * @return {integer} The first bad version
     */
    return function(n) {
        var low = 1;
        var high = n;
        while(true) {
            mid = parseInt((low+high)/2);
            if(isBadVersion(mid) && mid!=1 && !isBadVersion(mid-1))
                return mid;
            else if(isBadVersion(mid) && mid==1)
                return mid;
            else if(isBadVersion(mid) && mid!=1 && isBadVersion(mid-1))
                high = mid - 1;
            else if(!isBadVersion(mid) && mid!=n)
                low = mid + 1;
            else if(!isBadVersion(mid) && mid==n)
                    return -1;
        }
    };
};
